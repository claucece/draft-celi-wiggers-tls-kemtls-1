



tls                                                           T. Wiggers
Internet-Draft                                        Radboud University
Intended status: Informational                                   S. Celi
Expires: 31 December 2021                                     Cloudflare
                                                            29 June 2021


                                 KEMTLS
                  draft-celi-wiggers-tls-kemtls-latest

Abstract

   TODO

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the Transport Layer
   Security Working Group mailing list (tls@ietf.org), which is archived
   at https://mailarchive.ietf.org/arch/browse/tls/.

   Source for this draft and an issue tracker can be found at
   https://github.com/claucece/draft-celi-wiggers-tls-kemtls.md.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 31 December 2021.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Requirements Notation
   3.  Terminology
   4.  Protocol Overview
     4.1.  Prior-knowledge KEM-TLS
   5.  Handshake protocol
   6.  Key Exchange Messages
   7.  Key schedule
     7.1.  Negotiation
     7.2.  Handshake Secret
     7.3.  Authenticated Handshake Secret
     7.4.  Finished keys
   8.  Protocol Mechanics
   9.  (Middlebox) Compatibility Considerations
   10. Integration with Delegated Credentials
   11. Security Considerations
   12. IANA Considerations
   13. Acknowledgements
   14. References
     14.1.  Normative References
     14.2.  Informative References
   Authors' Addresses

1.  Introduction

   DISCLAIMER: This is a work-in-progress draft.

   The primary goal of TLS 1.3 as defined in [RFC8446] is to provide a
   secure channel between two communicating peers; the only requirement
   from the underlying transport is a reliable, in-order data stream.
   Due to the advent of quantum computers, moving the TLS ecosystem to
   post-quantum cryptography is a need.  The protocol achieving that
   goal is called KEMTLS.  Specifically, this post-quantum secure
   channel should provide the following properties:

   *  Authentication: The server side of the channel is always
      authenticated; the client side is optionally authenticated.
      Authentication happens via asymmetric cryptography by the usage of
      key-encapsulation mechanisms (KEM) by using the long-term KEM
      public keys in the Certificate.

   *  Confidentiality: Data sent over the channel after establishment is
      only visible to the intended endpoints.  KEMTLS does not hide the
      length of the data it transmits, though endpoints are able to pad
      KEMTLS records in order to obscure lengths and improve protection
      against traffic analysis techniques.

   *  Integrity: Data sent over the channel after establishment cannot
      be modified by attackers without detection.

   KEMTLS is provided as an extension to TLS 1.3, but it heavily
   modifies the handshake protocol of it.

   In this document, we will describe two modes in which KEMTLS can be
   used: a full post-quantum mode where only post-quantum algorithms are
   used and a hybrid post-quantum mode where traditional and post-
   quantum algorithms are combined.

   Note that KEMTLS can also be used in any of those modes with cached
   information to reduce the number of round trips it needs to perform.

2.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Terminology

   TODO: add definition of traditional algorithms, post-quantum
   algorithms and KEM functionality.

4.  Protocol Overview

   Figure 1 below shows the basic full KEMTLS handshake with both KEMTLS
   modes:

       Client                                           Server

Key  ^ ClientHello
Exch | + (kem)key_share
     v + (kem)signature_algorithms      -------->
                                                      ServerHello  ^ Key
                                                +  (kem)key_share  v Exch
                                            <EncryptedExtensions>  ^  Server
                                             <CertificateRequest>  v  Params
     ^                                              <Certificate>  ^
Auth | <KEMCiphertext>                                             |  Auth
     | {Certificate}                -------->                      |
     |                              <--------     {KEMCiphertext}  |
     | {Finished}                   -------->                      |
     | [Application Data*]          -------->                      |
     v                              <-------           {Finished}  |
                                                                   v
       [Application Data]           <------->  [Application Data]

              +  Indicates noteworthy extensions sent in the
                 previously noted message.

              *  Indicates optional or situation-dependent
                 messages/extensions that are not always sent.

              <> Indicates messages protected using keys
                 derived from a [sender]_handshake_traffic_secret.

              {} Indicates messages protected using keys
                 derived from a [sender]_authenticated_handshake_traffic_secret.

              [] Indicates messages protected using keys
                 derived from [sender]_application_traffic_secret_N.

             Figure 1: Message Flow for Full KEMTLS Handshake
             Post-quantum KEMs that can be added are shown as part of the
             key_share and signature_algorithms extensions

   The handshake can be thought of in four phases compared to the three
   ones from TLS 1.3.  It achieves both post-quantum confidentiality and
   post-quantum authentication (certificate-based).

   In the Key Exchange phase, the client sends the ClientHello message,
   which contains a random nonce (ClientHello.random); its offered
   protocol versions; a list of symmetric cipher/HKDF hash pairs; a set
   of KEM key shares and/or hybrid key shares (if using a hybrid mode);
   and potentially additional extensions.

   The server processes the ClientHello, and determines the appropriate
   cryptographic parameters for the connection: if both a Post-quantum
   KEM has been advertised for usage in key_shares and
   signature_algorithms extension, then KEMTLS is supported by the
   client.

   The server then responds with its own ServerHello, which indicates
   the negotiated connection parameters.  The combination of the
   ClientHello and the ServerHello determines the shared keys.  The
   ServerHello contains a "key_share" extension with the server's
   ephemeral Post-Quantum KEM share; the server's share MUST be in the
   same group as one of the client's shares.  If a hybrid mode is in
   use, the ServerHello contains a "key_share" extension with the
   server's ephemeral hybrid share, which MUST be in the same group as
   the client's shares, and the post-quantum one.

   The server then sends two messages to establish the Server
   Parameters:

   *  EncryptedExtensions: responses to ClientHello extensions that are
      not required to determine the cryptographic parameters, other than
      those that are specific to individual certificates.

   *  CertificateRequest: in KEMTLS, only certificate-based client
      authentication is desired, so the server sends the desired
      parameters for that certificate.  This message is omitted if
      client authentication is not desired.

   Then, the client and server exchange implicity authenticated
   messages.  KEMTLS uses the same set of messages every time that
   certificate-based authentication is needed.  Specifically:

   *  Certificate: The certificate of the endpoint and any per-
      certificate extensions.  This message is omitted by the client if
      the server did not send CertificateRequest (thus indicating that
      the client should not authenticate with a certificate).  The
      Certificate should include a long-term public KEM key.  If a
      hybrid mode is in use, the Certificate should also include a
      hybrid long-term public key.

   *  KEMCiphertext: A key encapsulation against the certificate's long-
      term public key, which yields an implicitly authenticated shared
      secret.

   Upon receiving the server's messages, the client responds with its
   Authentication messages, namely Certificate and KEMCiphertext (if
   requested).

   Finally, the server and client reply with their explicitly
   authenticated messages, specifically:

   *  Finished: A MAC (Message Authentication Code) over the entire
      handshake.  This message provides key confirmation and binds the
      endpoint's identity to the exchanged keys.

   At this point, the handshake is complete, and the client and server
   derive the keying material required by the record layer to exchange
   application-layer data protected through authenticated encryption.

   Application Data MUST NOT be sent prior to sending the Finished
   message, except as specified in Section 2.3.  Note that while the
   client may send Application Data prior to receiving the server's last
   Authentication message, any data sent at that point is, of course,
   being sent to an implicitly authenticated peer.  It is worth noting
   that Application Data sent prior to receiving the server's last
   Authentication message can be subject to a client downgrade attack.
   Full downgrade resilience is only achieved when explicit
   authentication is achieved: when the Client receives the Finished
   message from the Server.

4.1.  Prior-knowledge KEM-TLS

   Given the added number of round-trips of KEMTLS compared to the TLS
   1.3, the KEMTLS handshake can be improved by the usage of pre-
   distributed KEM authentication keys to achieve explicit
   authentication and full downgrade resilience as early as possible.  A
   peer's long-term KEM authentication key can be cached in advance.

   Figure 2 below shows a pair of handshakes in which the first
   handshake establishes cached information and the second handshake
   uses it:

       Client                                           Server

Key  ^ ClientHello
Exch | + (kem)key_share
     v + (kem)signature_algorithms      -------->
                                                      ServerHello  ^ Key
                                                +  (kem)key_share  v Exch
                                            <EncryptedExtensions>  ^  Server
                                             <CertificateRequest>  v  Params
     ^                                              <Certificate>  ^
Auth | <KEMCiphertext>                                             |  Auth
     | {Certificate}                -------->                      |
     |                              <--------     {KEMCiphertext}  |
     | {Finished}                   -------->                      |
     | [Cached Server Certificate]
     | [Cached Server Certificate Request]
     | [Application Data*]          -------->                      |
     v                              <-------           {Finished}  |
                                      [Cached Client Certificate]  |
                                                                   v
       [Application Data]           <------->  [Application Data]

       Client                                           Server

Key  ^ ClientHello
Exch | + (kem)key_share
&    | + cached_info_extension
Auth | + kem_ciphertext_extension
     | + (kem)signature_algorithms
     | <Certificate>                -------->                      |
     |                                                ServerHello  ^ Key
     |                                          +  (kem)key_share  | Exch,
     |                                 +  {cached_info_extension}  | Auth &
     |                                      {EncryptedExtensions}  | Server
     |                                            {KEMCiphertext}  | Params
     |                              <--------          {Finished}  v
     |                              <-------- [Application Data*]
     v {Finished}                   -------->

       [Application Data]           <------->  [Application Data]

5.  Handshake protocol

   TODO: add KEMCiphertext to the "HandshakeType" and forbid
   "CertificateVerify".

6.  Key Exchange Messages

   TODO: huge todo

7.  Key schedule

7.1.  Negotiation

   1.   Add KEMs to "supported_groups" and KEM public key to
        "key_shares".

   2.   Add "KEMTLSwithSomeKEM" to "signature_algorithms".

   3.   Alternatively, use DC draft and add it to
        "signature_algorithms_dc".

   4.   Server replies with KEM ciphertext encapsulated to KEM public
        key (or HRR).

   5.   Server replies with CA-signed KEM public-key X.509 certificate.

   6.   Alternatively, use DC draft and reply with KEM delegated
        credential.

   7.   Server MUST NOT submit "CertificateVerify" message.

   8.   Client detects that KEMTLS is being used via the "signature
        algorithm", ie. the type of credential provided by the server.

   9.   Client encapsulates ciphertext to server and transmits it as
        "ClientKEMCiphertext" (or piggy-back on "ClientKeyExchange"?).

   10.  Client submits "ClientFinished".

   11.  Client completed handshake.

   12.  Server submits "ServerFinished".

   13.  Server completes handshake.

   TODO probably split off DC into separate paragraph.

7.2.  Handshake Secret

   The Handshake secret "HS" is derived from the ephemeral key exchange
   shared secret.

   ...
                        v
   ephemeral_kem_shared -> HKDF-Extract = Handshake Secret
                        v
   ...

7.3.  Authenticated Handshake Secret

   After deriving "HS", the Handshake Secret, from the ephemeral keys,
   we need an additional handshake secret in KEMTLS.  We require this
   additional handshake secret as we need an (implicitly) authenticated
   handshake secret to encrypt any client credentials under.  Otherwise
   we do not have confidentiality for the client certificate.

   "AHS" is derived from the hanshake secret and the static shared key.
   We change the derivation of the main secret accordingly.

                  Handshake Secret
                     |
                     v
                    Derive-Secret(., "derived", "")
                     |
                     v
static_server_shared -> HKDF.Extract = Authenticated Handshake Secret
                     |
                     +-----> Derive-Secret(., "c ahs traffic",
                     |                     ClientHello...ClientKemCiphertext)
                     |                     = client_authenticated_handshake_traffic_secret
                     |
                     +-----> Derive-Secret(., "s ahs traffic",
                     |                     ClientHello...ClientKemCiphertext)
                     |                     = server_authenticated_handshake_traffic_secret
                     |
                     v
                    Derive-Secret(., "derived", "")
                     |
                     v
static_client_shared -> HKDF.Extract = Main Secret
                     v

   "shared_secret_static_client_kem" is the shared secret encapsulated
   to the client's public key.  If there is no client authentication,
   it's simply replaced by "0".

                        v
                      0 -> HKDF.Extract = Main Secret
                        v

7.4.  Finished keys

   We derived the finished keys from "MS" instead of from "CHTS" and
   "SHTS".  We separate them by individual labels and the transcript.

   finished_client <- HKDF.Expand(MS, "c finished", transcript_up_to_CF)
   finished_server <- HKDF.Expand(MS, "s finished", transcript_up_to_SF)

8.  Protocol Mechanics

   TODO

9.  (Middlebox) Compatibility Considerations

   Like in TLS 1.3, after the ephemeral key is derived a
   "ChangeCipherSpec" message is sent and the messages afterwards are
   encrypted.  This will make the following messages opaque to non-
   decrypting middle boxes.

   The "ClientHello" and "ServerHello" messages are still in the clear
   and these require the addition of new "key_share" types.  Typical KEM
   public-key and ciphertext sizes are also significantly bigger than
   pre-quantum (EC)DH keyshares.  This may still cause problems.

10.  Integration with Delegated Credentials

11.  Security Considerations

   TODO:

   *  sending data to an implicitly authenticated and not-full downgrade
      resilient peer

   *  address CA and pq keys

   *  consider implicit vs explicit authentication

   *  consider downgrade resilience

12.  IANA Considerations

   *  We need a new OID for each KEM to encode them in X.509
      certificates.

13.  Acknowledgements

   This work has been supported by the European Research Council through
   Starting Grant No. 805031 (EPOQUE).

14.  References

14.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://datatracker.ietf.org/doc/html/rfc8446>.

14.2.  Informative References

   [KEMTLS]   Stebila, D., Schwabe, P., and T. Wiggers, "Post-Quantum
              TLS without Handshake Signatures",
              DOI 10.1145/3372297.3423350, IACR
              ePrint https://ia.cr/2020/534, November 2020,
              <https://doi.org/10.1145/3372297.3423350>.

Authors' Addresses

   Thom Wiggers
   Radboud University

   Email: thom@thomwiggers.nl


   Sofía Celi
   Cloudflare

   Email: cherenkov@riseup.net
